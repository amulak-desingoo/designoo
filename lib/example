
  import 'dart:convert';
  import 'package:flutter/material.dart';
  import 'package:http/http.dart' as http;
  import 'package:sales_app/Models/Leads_model.dart';

  class Sales extends StatelessWidget {
    const Sales({super.key, required this.title});
    final String title;
    @override
    Widget build(BuildContext context) {
      return SafeArea(
        child: Scaffold(
          appBar: AppBar(
            title: Text('Sales'),
          ),
          body: ElevatedButton(
              onPressed: () => Navigator.push(
                context,MaterialPageRoute(
                  builder: (context) => _Sales(),
                ),
              ),
              child: Text('Leads List'),
            ),
          ),
      );
    }
  }

  class _Sales extends StatelessWidget {
    Future getData() async {

        http.Response response;
        response = await http.get(Uri.parse('https://designoo.bitrix24.in/rest/269/kenpf4my1m48ere0/crm.lead.list.json'));
        if (response.statusCode == 200) {
          setState((){
            //stringResponse = response.body;
            mapResponse = json.decode(response.body);
            dataResponse = mapResponse.toString();
          });
        }
      }
      @override
      void initState() {
        getData();
        super.initState();
      }

      @override
      Widget build(BuildContext context) {
        return SafeArea(
          child: Scaffold(
            appBar: AppBar(
              title: Text('Leads'),
            ),
            body: Text(mapResponse.toString()),
          ),
        );
    }
  }










  //list------------------------------------------------
    Future<LeadsModel> getData() async {
      final response = await http.get(Uri.parse('https://designoo.bitrix24.in/rest/269/kenpf4my1m48ere0/crm.lead.list.json'));
      var data = jsonDecode(response.body.toString());
      if (response.statusCode == 200) {
          return LeadsModel.fromJson(json.decode(data));
      }else{
        return LeadsModel.fromJson(json.decode(data));
      }
    }
    @override
    Widget build(BuildContext context) {
      return SafeArea(
        child: Scaffold(
          appBar: AppBar(
            title: Text('Leads'),
          ),
          body: Column(children: [
            Expanded(
                child: FutureBuilder<LeadsModel>(
                    future: getData(),
                    builder: (context,snapshot){
                      return ListView.builder(
                          itemBuilder: (context, index){
                              return Column(
                                children: [
                                  Text(index.toString())
                                ],);
                          });
                    }))
          ],),
        ),
      );
    }
  }


  import 'dart:developer';
  import 'dart:async';
  import 'package:designoo/main.dart';
  import 'package:flutter/material.dart';
  import 'package:pin_code_fields/pin_code_fields.dart';
  import 'package:designoo/home.dart';
  import 'package:designoo/text.dart';
  import 'package:firebase_core/firebase_core.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import 'package:firebase_phone_auth_handler/firebase_phone_auth_handler.dart';
  //import '/pin_input_field.dart';
  import 'firebase_options.dart';

  void main() async {
    final FirebaseAuth mAuth;
    WidgetsFlutterBinding.ensureInitialized();
    await Firebase.initializeApp(
      options: FirebaseOptions(
        apiKey: "AIzaSyCDWDnLls1q_KrxGgSHxWHa24J80x8XBj8",
        appId: "1:440854636188:android:543b4abcf96a65b8346f59",
        messagingSenderId: "440854636188",
        projectId: "designoo-84e76",
      ),
    );
    runApp(const MyApp());
  }

  class MyApp extends StatelessWidget {

    const MyApp({super.key});
    @override
    Widget build(BuildContext context) {
      return MaterialApp(
        title: 'Designoo',
        debugShowCheckedModeBanner: false,
        initialRoute: 'SignUp',
        routes:{'SignUp': (context) => SignUp(), 'LogIn':(context) => LogIn()},
      );
    }
  }

  // ------------------------------------------------------
  class SignUp extends StatefulWidget {
    const SignUp({Key? key}) : super(key: key);
    static String verify ="";

    @override
    State<SignUp> createState() => _MySignUp();
  }

  class _MySignUp extends State<SignUp> {
    TextEditingController countrycode = TextEditingController();
    String? phoneNumber;
    TextEditingController countryController = TextEditingController();

    @override
    void initState() {
      countryController.text = "+91";
      super.initState();
    }

    @override
    Widget build(BuildContext context) {
      return Scaffold(
        body: Container(
          margin: EdgeInsets.only(left: 25, right: 25),
          alignment: Alignment.center,
          child: SingleChildScrollView(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Image.asset( 'images/logo.jpg',
                  width: 150,
                  height: 150,
                ),
                SizedBox(  height: 25,  ),
                Text( "Phone Verification",
                  style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                ),
                SizedBox( height: 10,  ),
                Text(
                  "We need to register your phone without getting started!",
                  style: TextStyle(fontSize: 16,  ),
                  textAlign: TextAlign.center,
                ),
                SizedBox( height: 30, ),
                Container(
                  height: 55,
                  decoration: BoxDecoration(
                      border: Border.all(width: 1, color: Colors.grey),
                      borderRadius: BorderRadius.circular(10)),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      SizedBox( width: 10,  ),
                      SizedBox(
                        width: 40,
                        child: TextField(
                          controller: countryController,
                          keyboardType: TextInputType.number,
                          decoration: InputDecoration(
                            border: InputBorder.none,
                          ),
                        ),
                      ),
                      Text(
                        "|",
                        style: TextStyle(fontSize: 33, color: Colors.grey),
                      ),
                      SizedBox(width: 10,  ),
                      Expanded(
                          child: TextField(
                            keyboardType: TextInputType.phone,
                            onChanged: (value){
                              phoneNumber = value;
                            },
                            decoration: InputDecoration(
                              border: InputBorder.none, hintText: "Phone",),
                          ))
                    ],
                  ),
                ),
                SizedBox( height: 20,  ),
                SizedBox(
                  width: double.infinity,
                  height: 45,
                  child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                          primary: Colors.yellow,
                          shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10))),
                      onPressed: () async {
                        print('-----------------------------------');
                        print('+91'+phoneNumber.toString());
                        await FirebaseAuth.instance.verifyPhoneNumber(
                          phoneNumber: '+91'+phoneNumber.toString(),
                          verificationCompleted: (PhoneAuthCredential credential) async {
                            print('verify--------------------------------------------');
                           },
                          verificationFailed: (FirebaseAuthException e) async {
                            print('auth--------------------------------------');
                          },
                          codeSent: (String verificationId, int? resendToken) async {
                            print('helo------------------------------');
                            SignUp.verify=verificationId;
                            Navigator.pushNamed(context,"LogIn");
                          },
                          codeAutoRetrievalTimeout: (String verificationId) async {},
                        );
                      },
                      child: Text("Send the code")),
                )
              ],
            ),
          ),
        ),
      );
    }
  }

  class LogIn extends StatefulWidget {
    final String? phoneNumber;
    const LogIn({Key? key, this.phoneNumber,}) : super(key: key);

    @override _LogIn createState() => _LogIn();
  }

  class _LogIn extends State<LogIn> {
    final FirebaseAuth auth = FirebaseAuth.instance;
    TextEditingController textEditingController = TextEditingController();
    StreamController<ErrorAnimationType>? errorController;

    bool hasError = false;
    String currentText = "";
    final formKey = GlobalKey<FormState>();

    @override
    void initState() {
      errorController = StreamController<ErrorAnimationType>();
      super.initState();
    }

    @override
    void dispose() {
      errorController!.close();
      super.dispose();
    }


    // snackBar Widget
    snackBar(String? message) {
      return ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message!),
          duration: const Duration(seconds: 2),
        ),
      );
    }

    @override
    Widget build(BuildContext context) {
      var code = '';
      return Scaffold(
        backgroundColor: Colors.yellowAccent,
        body: GestureDetector(
          onTap: () {},
          child: SizedBox(
            height: MediaQuery.of(context).size.height,
            width: MediaQuery.of(context).size.width,
            child: ListView(
              children: <Widget>[
                const SizedBox(height: 30),
                SizedBox(
                  height: MediaQuery.of(context).size.height / 3,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(30),
                    child: Image.asset('images/logo.jpg'),
                  ),
                ),
                const SizedBox(height: 8),
                const Padding(
                  padding: EdgeInsets.symmetric(vertical: 8.0),
                  child: Text('Phone Number Verification',
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 22),
                    textAlign: TextAlign.center,
                  ),
                ),
                Padding(
                  padding:
                  const EdgeInsets.symmetric(horizontal: 30.0, vertical: 8),
                  child: RichText(
                    text: TextSpan(
                        text: "Enter the code sent to ",
                        children: [
                          TextSpan(
                              text: "${widget.phoneNumber}",
                              style: const TextStyle(
                                  color: Colors.black,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 15)),
                        ],
                        style:
                        const TextStyle(color: Colors.black54, fontSize: 15)),
                    textAlign: TextAlign.center,
                  ),
                ),
                const SizedBox(
                  height: 20,
                ),
                Form(
                  key: formKey,
                  child: Padding(
                      padding: const EdgeInsets.symmetric(
                          vertical: 8.0, horizontal: 30),
                      child: PinCodeTextField(
                        appContext: context,
                        pastedTextStyle: TextStyle(
                          color: Colors.green.shade600,
                          fontWeight: FontWeight.bold,
                        ),
                        length: 6,
                        obscureText: true,
                        obscuringCharacter: '*',
                        obscuringWidget: const FlutterLogo(
                          size: 24,
                        ),
                        blinkWhenObscuring: true,
                        animationType: AnimationType.fade,
                        validator: (v) {
                          if (v!.length < 3) {
                            return "I'm from validator";
                          } else {
                            return null;
                          }
                        },
                        pinTheme: PinTheme(
                          shape: PinCodeFieldShape.box,
                          borderRadius: BorderRadius.circular(5),
                          fieldHeight: 50,
                          fieldWidth: 40,
                          activeFillColor: Colors.white,
                        ),
                        cursorColor: Colors.black,
                        animationDuration: const Duration(milliseconds: 300),
                        enableActiveFill: true,
                        errorAnimationController: errorController,
                        controller: textEditingController,
                        keyboardType: TextInputType.number,
                        boxShadows: const [
                          BoxShadow(
                            offset: Offset(0, 1),
                            color: Colors.black12,
                            blurRadius: 10,
                          )
                        ],
                        onCompleted: (v) {
                          debugPrint("Completed");
                        },
                        // onTap: () {
                        //   print("Pressed");
                        // },
                        onChanged: (value) {
                          code=value;
                          debugPrint(value);
                          setState(() {
                            currentText = value;
                          });
                        },
                        beforeTextPaste: (text) {
                          debugPrint("Allowing to paste $text");
                          //if you return true then it will show the paste confirmation dialog. Otherwise if false, then nothing will happen.
                          //but you can show anything you want here, like your pop up saying wrong paste format or etc
                          return true;
                        },
                      )),
                ),
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 30.0),
                  child: Text(
                    hasError ? "*Please fill up all the cells properly" : "",
                    style: const TextStyle(
                        color: Colors.red,
                        fontSize: 12,
                        fontWeight: FontWeight.w400),
                  ),
                ),
                const SizedBox(
                  height: 20,
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Text(
                      "Didn't receive the code? ",
                      style: TextStyle(color: Colors.black54, fontSize: 15),
                    ),
                    TextButton(
                      onPressed: () => snackBar("OTP resend!!"),
                      child: const Text(
                        "RESEND",
                        style: TextStyle(
                            color: Color(0xFF91D3B3),
                            fontWeight: FontWeight.bold,
                            fontSize: 16),
                      ),
                    )
                  ],
                ),
                const SizedBox(
                  height: 14,
                ),
                Container(
                  margin:
                  const EdgeInsets.symmetric(vertical: 16.0, horizontal: 30),
                  child: ButtonTheme(
                    height: 50,
                    child: TextButton(
                      onPressed: () {
                        formKey.currentState!.validate();
                        // conditions for validating
                        if (currentText.length != 6 || currentText != "123456") {
                          errorController!.add(ErrorAnimationType
                              .shake); // Triggering error shake animation
                          setState(() => hasError = true);
                        } else {
                          setState(
                                () {
                              hasError = false;
                              snackBar("OTP Verified!!");
                            },
                          );
                        }
                      },
                      child: SizedBox(
                        height: 45,
                        width: double.infinity,
                        child: ElevatedButton(
                          onPressed: () async{
                            PhoneAuthCredential credential = PhoneAuthProvider.credential(verificationId: SignUp.verify, smsCode: code);

                            await auth.signInWithCredential(credential);
                          },
                          child: Text('verify'),
                          style: ElevatedButton.styleFrom(
                            primary: Colors.green.shade500,
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            )
                          ),
                        ),
                      ),
                    ),
                  ),
                  decoration: BoxDecoration(
                      color: Colors.green.shade300,
                      borderRadius: BorderRadius.circular(5),
                      boxShadow: [
                        BoxShadow(
                            color: Colors.green.shade200,
                            offset: const Offset(1, -2),
                            blurRadius: 5),
                        BoxShadow(
                            color: Colors.green.shade200,
                            offset: const Offset(-1, 2),
                            blurRadius: 5)
                      ]),
                ),
                const SizedBox(
                  height: 16,
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    Flexible(
                        child: TextButton(
                          child: const Text("Clear"),
                          onPressed: () {
                            textEditingController.clear();
                          },
                        )),
                    Flexible(
                        child: TextButton(
                          child: const Text("Set Text"),
                          onPressed: () {
                            setState(() {
                              textEditingController.text = "123456";
                            });
                          },
                        )),
                  ],
                )
              ],
            ),
          ),
        ),
      );
    }
  }


















































    var _isInit = true;
    List<LeadsModel> _leads = [];
    var list = [];

    Future<void> getData()async{
      final response = await http.get(Uri.parse('https://designoo.bitrix24.in/rest/269/kenpf4my1m48ere0/crm.lead.list.json'));
      try{
        final extractedData = json.decode(response.body) as Map<String,dynamic>;
        final List<LeadsModel>loadedLeads = [];
        extractedData.forEach((leadsId, leadsData) {
          print('loadsData: -----${leadsData}');
          print('loadsData: ======================${leadsId}');
          print(leadsData == "result");
          if(leadsData == "result"){
            final result = json.decode(leadsId) as Map<String,dynamic>;
            final arr = [];
            print('13356146254126476273865724268');
            result.forEach((resultId, resultData) {
              print('result======asd=sfawsf======4${result}');
            });
            // var obj = {
            //   "id":leadsData.ID
            // print(leadsData);
            // };
            // list.add(obj);
            print('this is leadsData---------------------${leadsData}');

          }
        });
        _leads = loadedLeads;

        print('this leads ...........${list}');
        print(_leads);
      }catch(error){
        throw (error);
      }
    }


























    class _Dataleads extends State<Dataleads> {
      var _isInit = true;
      // List<LeadsModel> list = [];
      var list = [];

      Future getData() async{
        final response = await http.get(Uri.parse('https://designoo.bitrix24.in/rest/269/kenpf4my1m48ere0/crm.lead.list.json'));
        try{
          final extractedData = json.decode(response.body) as Map<String,dynamic>;
          final List<dynamic> loadedLeads = extractedData['result'];
          //print(loadedLeads.map((e) => e["NAME"]).toList());
          list = loadedLeads;
        }catch(error){
          throw (error);
        }
      }